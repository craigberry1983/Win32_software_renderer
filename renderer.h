#ifndef RENDERER_H
#define RENDERER_H

#include "shared_code.h"
#include "parish_math.h"

#define MAX_DEBUG_MSG 512

//icon data
uint16_t iconData[16*16] = 
{ 
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xF800,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,
	0xF800,0xFFE0,0xF800,0xF800,0xF800,0xF800,0xF800,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,
	0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,
	0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0xF800,0xF800,0xF800,0xF800,0xFFE0,0xFFE0,0xF800,0x0fff,
	0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xF800,0xF800,0xFFE0,0xF800,
	0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xFFE0,0xFFE0,0xF800,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xFFE0,0xF800,0xFFE0,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xF800,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0xFFE0,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,
	0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0xF800,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff,0x0fff
};

const unsigned char fontSmall[96][3] = 
{
	{0x00,0x00,0x00}, {0x00,0x2e,0x00}, {0x06,0x00,0x06}, {0x3e,0x14,0x3e}, {0x0c,0x36,0x18}, {0x32,0x08,0x26},
	{0x14,0x2a,0x34}, {0x00,0x06,0x00}, {0x00,0x1c,0x22}, {0x22,0x1c,0x00}, {0x14,0x08,0x14}, {0x08,0x1c,0x08},
	{0x40,0x60,0x00}, {0x08,0x08,0x08}, {0x00,0x20,0x00}, {0x60,0x1c,0x02}, {0x3e,0x22,0x3e}, {0x24,0x3e,0x20},
	{0x32,0x2a,0x26}, {0x22,0x2a,0x3e}, {0x0e,0x08,0x3e}, {0x2e,0x2a,0x3a}, {0x3e,0x2a,0x3a}, {0x02,0x3a,0x06},
	{0x3e,0x2a,0x3e}, {0x2e,0x2a,0x3e}, {0x00,0x14,0x00}, {0x40,0x64,0x00}, {0x08,0x14,0x22}, {0x14,0x14,0x14},
	{0x22,0x14,0x08}, {0x02,0x2a,0x06}, {0x3e,0x22,0x2e}, {0x3e,0x0a,0x3e}, {0x3e,0x2a,0x36}, {0x3e,0x22,0x22},
	{0x3e,0x22,0x1c}, {0x3e,0x2a,0x22}, {0x3e,0x0a,0x02}, {0x3e,0x22,0x3a}, {0x3e,0x08,0x3e}, {0x22,0x3e,0x22},
	{0x30,0x20,0x3e}, {0x3e,0x08,0x36}, {0x3e,0x20,0x20}, {0x3e,0x04,0x3e}, {0x3c,0x08,0x1e}, {0x3e,0x22,0x3e},
	{0x3e,0x0a,0x0e}, {0x3e,0x22,0x7e}, {0x3e,0x0a,0x34}, {0x2e,0x2a,0x3a}, {0x02,0x3e,0x02}, {0x3e,0x20,0x3e},
	{0x1e,0x20,0x1e}, {0x3e,0x10,0x3e}, {0x36,0x08,0x36}, {0x06,0x38,0x06}, {0x32,0x2a,0x26}, {0x00,0x3e,0x22},
	{0x02,0x1c,0x60}, {0x22,0x3e,0x00}, {0x04,0x02,0x04}, {0x40,0x40,0x40}, {0x00,0x02,0x00}, {0x3e,0x0a,0x3e},
	{0x3e,0x2a,0x36}, {0x3e,0x22,0x22}, {0x3e,0x22,0x1c}, {0x3e,0x2a,0x22}, {0x3e,0x0a,0x02}, {0x3e,0x22,0x3a},
	{0x3e,0x08,0x3e}, {0x22,0x3e,0x22}, {0x30,0x20,0x3e}, {0x3e,0x08,0x36}, {0x3e,0x20,0x20}, {0x3e,0x04,0x3e},
	{0x3c,0x08,0x1e}, {0x3e,0x22,0x3e}, {0x3e,0x0a,0x0e}, {0x3e,0x22,0x7e}, {0x3e,0x0a,0x34}, {0x2e,0x2a,0x3a},
	{0x02,0x3e,0x02}, {0x3e,0x20,0x3e}, {0x1e,0x20,0x1e}, {0x3e,0x10,0x3e}, {0x36,0x08,0x36}, {0x06,0x38,0x06},
	{0x32,0x2a,0x26}, {0x08,0x3e,0x22}, {0x00,0x7e,0x00}, {0x22,0x3e,0x08}, {0x02,0x06,0x04}, {0x00,0x00,0x00}
};

const unsigned char fontMedium[96][6] = 
{
	{0x00,0x00,0x00,0x00,0x00,0x00}, {0x2e,0x00,0x00,0x00,0x00,0x00}, {0x03,0x00,0x03,0x00,0x00,0x00},
	{0x0a,0x1f,0x0a,0x1f,0x0a,0x00}, {0x2e,0x2a,0x6b,0x2a,0x3a,0x00}, {0x0e,0x2a,0x1e,0x08,0x3c,0x2a},
	{0x3e,0x2a,0x2a,0x22,0x38,0x08}, {0x03,0x00,0x00,0x00,0x00,0x00}, {0x1c,0x22,0x00,0x00,0x00,0x00}, 
	{0x22,0x1c,0x00,0x00,0x00,0x00}, {0x15,0x0e,0x04,0x0e,0x15,0x00}, {0x08,0x08,0x3e,0x08,0x08,0x00}, 
	{0x60,0x00,0x00,0x00,0x00,0x00}, {0x08,0x08,0x08,0x08,0x08,0x00}, {0x20,0x00,0x00,0x00,0x00,0x00}, 
	{0x20,0x10,0x08,0x04,0x02,0x00}, {0x3e,0x22,0x2a,0x22,0x3e,0x00}, {0x04,0x3e,0x00,0x00,0x00,0x00}, 
	{0x3a,0x2a,0x2a,0x2a,0x2e,0x00}, {0x2a,0x2a,0x2a,0x2a,0x3e,0x00}, {0x0e,0x08,0x08,0x08,0x3e,0x00}, 
	{0x2e,0x2a,0x2a,0x2a,0x3a,0x00}, {0x3e,0x2a,0x2a,0x2a,0x3a,0x00}, {0x02,0x02,0x02,0x02,0x3e,0x00}, 
	{0x3e,0x2a,0x2a,0x2a,0x3e,0x00}, {0x2e,0x2a,0x2a,0x2a,0x3e,0x00}, {0x14,0x00,0x00,0x00,0x00,0x00}, 
	{0x34,0x00,0x00,0x00,0x00,0x00}, {0x08,0x14,0x22,0x00,0x00,0x00}, {0x14,0x14,0x14,0x14,0x14,0x00}, 
	{0x22,0x14,0x08,0x00,0x00,0x00}, {0x06,0x02,0x2a,0x0a,0x0e,0x00}, {0x3e,0x02,0x3a,0x2a,0x3e,0x00}, 
	{0x3e,0x12,0x12,0x12,0x3e,0x00}, {0x3e,0x2a,0x2a,0x2a,0x36,0x00}, {0x3e,0x22,0x22,0x22,0x22,0x00}, 
	{0x3e,0x22,0x22,0x22,0x1c,0x00}, {0x3e,0x2a,0x2a,0x2a,0x22,0x00}, {0x3e,0x0a,0x0a,0x0a,0x02,0x00}, 
	{0x3e,0x22,0x2a,0x2a,0x3a,0x00}, {0x3e,0x08,0x08,0x08,0x3e,0x00}, {0x22,0x3e,0x22,0x00,0x00,0x00}, 
	{0x38,0x20,0x20,0x20,0x3e,0x00}, {0x3e,0x08,0x08,0x14,0x22,0x00}, {0x3e,0x20,0x20,0x20,0x20,0x00}, 
	{0x3e,0x04,0x38,0x04,0x3e,0x00}, {0x3e,0x04,0x08,0x10,0x3e,0x00}, {0x3e,0x22,0x22,0x22,0x3e,0x00}, 
	{0x3e,0x0a,0x0a,0x0a,0x0e,0x00}, {0x3e,0x22,0x72,0x22,0x3e,0x00}, {0x3e,0x0a,0x0a,0x1a,0x2e,0x00}, 
	{0x2e,0x2a,0x2a,0x2a,0x3a,0x00}, {0x02,0x02,0x3e,0x02,0x02,0x00}, {0x1e,0x20,0x20,0x20,0x1e,0x00}, 
	{0x0e,0x10,0x20,0x10,0x0e,0x00}, {0x3e,0x10,0x0e,0x10,0x3e,0x00}, {0x22,0x14,0x08,0x14,0x22,0x00}, 
	{0x02,0x04,0x38,0x04,0x02,0x00}, {0x3a,0x2a,0x2a,0x2a,0x2e,0x00}, {0x3e,0x22,0x00,0x00,0x00,0x00}, 
	{0x3f,0x21,0x3f,0x00,0x00,0x00}, {0x22,0x3e,0x00,0x00,0x00,0x00}, {0x0c,0x1e,0x3c,0x1e,0x0c,0x00}, 
	{0x20,0x20,0x20,0x20,0x20,0x00}, {0x1c,0x3e,0x3e,0x3e,0x1c,0x00}, {0x3c,0x24,0x24,0x24,0x3c,0x20}, 
	{0x3e,0x24,0x24,0x24,0x3c,0x00}, {0x3c,0x24,0x24,0x24,0x24,0x00}, {0x3c,0x24,0x24,0x24,0x3e,0x00}, 
	{0x3c,0x24,0x34,0x2c,0x24,0x00}, {0x08,0x3e,0x0a,0x0a,0x00,0x00}, {0x1c,0x54,0x54,0x54,0x7c,0x00}, 
	{0x3e,0x04,0x04,0x04,0x3c,0x00}, {0x3a,0x00,0x00,0x00,0x00,0x00}, {0x7a,0x00,0x00,0x00,0x00,0x00}, 
	{0x3e,0x08,0x14,0x22,0x00,0x00}, {0x02,0x3e,0x00,0x00,0x00,0x00}, {0x3c,0x04,0x3c,0x04,0x3c,0x00}, 
	{0x3c,0x04,0x04,0x04,0x3c,0x00}, {0x3c,0x24,0x24,0x24,0x3c,0x00}, {0x7c,0x24,0x24,0x24,0x3c,0x00}, 
	{0x3c,0x24,0x24,0x24,0x7c,0x00}, {0x3c,0x04,0x04,0x04,0x00,0x00}, {0x24,0x2c,0x34,0x24,0x00,0x00}, 
	{0x04,0x3e,0x24,0x24,0x00,0x00}, {0x3c,0x20,0x20,0x20,0x3c,0x00}, {0x0c,0x10,0x20,0x10,0x0c,0x00}, 
	{0x3c,0x20,0x3c,0x20,0x3c,0x00}, {0x24,0x24,0x18,0x24,0x24,0x00}, {0x1c,0x50,0x50,0x50,0x7c,0x00}, 
	{0x24,0x34,0x2c,0x24,0x00,0x00}, {0x08,0x3e,0x22,0x00,0x00,0x00}, {0x1c,0x22,0x22,0x22,0x1c,0x00}, 
	{0x22,0x3e,0x08,0x00,0x00,0x00}, {0x01,0x01,0x01,0x00,0x00,0x00}, {0x00,0x00,0x00,0x00,0x00,0x00}
};

const unsigned char fontLarge[96][8] = 
{
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, {0x5f,0x5f,0x00,0x00,0x00,0x00,0x00,0x00}, 
	{0x07,0x07,0x00,0x07,0x07,0x00,0x00,0x00}, {0x14,0x7f,0x7f,0x14,0x7f,0x7f,0x14,0x00}, 
	{0x6f,0x6f,0x6b,0xeb,0x6b,0x7b,0x7b,0x00}, {0x63,0x73,0x38,0x1c,0x0e,0x67,0x63,0x00}, 
	{0x7f,0x7f,0x6b,0x63,0x68,0x78,0x78,0x00}, {0x07,0x07,0x00,0x00,0x00,0x00,0x00,0x00}, 
	{0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00}, {0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00}, 
	{0x36,0x08,0x7f,0x7f,0x7f,0x08,0x36,0x00}, {0x08,0x08,0x3e,0x08,0x08,0x00,0x00,0x00}, 
	{0xe0,0xe0,0x00,0x00,0x00,0x00,0x00,0x00}, {0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00}, 
	{0x60,0x60,0x00,0x00,0x00,0x00,0x00,0x00}, {0x70,0x1c,0x07,0x00,0x00,0x00,0x00,0x00}, 
	{0x7f,0x7f,0x63,0x63,0x63,0x7f,0x7f,0x00}, {0x60,0x66,0x66,0x7f,0x7f,0x60,0x60,0x00}, 
	{0x7b,0x7b,0x6b,0x6b,0x6b,0x6f,0x6f,0x00}, {0x63,0x63,0x6b,0x6b,0x6b,0x7f,0x7f,0x00}, 
	{0x1f,0x1f,0x18,0x18,0x18,0x7e,0x7e,0x00}, {0x6f,0x6f,0x6b,0x6b,0x6b,0x7b,0x7b,0x00}, 
	{0x7f,0x7f,0x6c,0x6c,0x6c,0x7c,0x7c,0x00}, {0x43,0x63,0x73,0x3b,0x1f,0x0f,0x07,0x00}, 
	{0x7f,0x7f,0x6b,0x6b,0x6b,0x7f,0x7f,0x00}, {0x1f,0x1f,0x1b,0x1b,0x1b,0x7f,0x7f,0x00}, 
	{0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0x00}, {0xec,0xec,0x00,0x00,0x00,0x00,0x00,0x00}, 
	{0x08,0x14,0x22,0x22,0x00,0x00,0x00,0x00}, {0x14,0x14,0x14,0x14,0x14,0x00,0x00,0x00}, 
	{0x22,0x22,0x14,0x08,0x00,0x00,0x00,0x00}, {0x03,0x03,0x5b,0x5b,0x0b,0x0f,0x0f,0x00}, 
	{0x7f,0x7f,0x63,0x6f,0x6b,0x6f,0x6f,0x00}, {0x7f,0x7f,0x1b,0x1b,0x1b,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x6b,0x6b,0x6f,0x7e,0x7c,0x00}, {0x7f,0x7f,0x63,0x63,0x63,0x63,0x63,0x00}, 
	{0x7f,0x7f,0x63,0x63,0x67,0x7e,0x7c,0x00}, {0x7f,0x7f,0x6b,0x6b,0x6b,0x6b,0x6b,0x00}, 
	{0x7f,0x7f,0x0b,0x0b,0x0b,0x03,0x03,0x00}, {0x7f,0x7f,0x63,0x63,0x6b,0x7b,0x7b,0x00}, 
	{0x7f,0x7f,0x18,0x18,0x18,0x7f,0x7f,0x00}, {0x63,0x63,0x7f,0x7f,0x63,0x63,0x63,0x00}, 
	{0x60,0x60,0x60,0x60,0x60,0x7f,0x3f,0x00}, {0x7f,0x7f,0x18,0x18,0x1e,0x7f,0x79,0x00}, 
	{0x7f,0x7f,0x60,0x60,0x60,0x60,0x60,0x00}, {0x7f,0x7f,0x03,0x06,0x03,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x0e,0x1c,0x38,0x7f,0x7f,0x00}, {0x7f,0x7f,0x63,0x63,0x63,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x1b,0x1b,0x1b,0x1f,0x1f,0x00}, {0x7f,0x7f,0x63,0xf3,0xf3,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x1b,0x3b,0x7b,0x7f,0x5f,0x00}, {0x6f,0x6f,0x6b,0x6b,0x6b,0x7b,0x7b,0x00}, 
	{0x03,0x03,0x7f,0x7f,0x03,0x03,0x03,0x00}, {0x7f,0x7f,0x60,0x60,0x60,0x7f,0x7f,0x00}, 
	{0x1f,0x3f,0x70,0x60,0x70,0x3f,0x1f,0x00}, {0x3f,0x7f,0x60,0x30,0x60,0x7f,0x3f,0x00}, 
	{0x77,0x7f,0x1c,0x08,0x1c,0x7f,0x77,0x00}, {0x07,0x0f,0x7c,0x78,0x7c,0x0f,0x07,0x00}, 
	{0x73,0x7b,0x6b,0x6b,0x6b,0x6f,0x67,0x00}, {0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00}, 
	{0x07,0x1c,0x70,0x00,0x00,0x00,0x00,0x00}, {0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00}, 
	{0x00,0x7f,0x40,0x7f,0x00,0x00,0x00,0x00}, {0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00}, 
	{0x00,0x7f,0x40,0x7f,0x00,0x00,0x00,0x00}, {0x7f,0x7f,0x1b,0x1b,0x1b,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x6b,0x6b,0x6f,0x7e,0x7c,0x00}, {0x7f,0x7f,0x63,0x63,0x63,0x63,0x63,0x00}, 
	{0x7f,0x7f,0x63,0x63,0x67,0x7e,0x7c,0x00}, {0x7f,0x7f,0x6b,0x6b,0x6b,0x6b,0x6b,0x00}, 
	{0x7f,0x7f,0x0b,0x0b,0x0b,0x03,0x03,0x00}, {0x7f,0x7f,0x63,0x63,0x6b,0x7b,0x7b,0x00}, 
	{0x7f,0x7f,0x18,0x18,0x18,0x7f,0x7f,0x00}, {0x63,0x63,0x7f,0x7f,0x63,0x63,0x63,0x00}, 
	{0x60,0x60,0x60,0x60,0x60,0x7f,0x3f,0x00}, {0x7f,0x7f,0x18,0x18,0x1e,0x7f,0x79,0x00}, 
	{0x7f,0x7f,0x60,0x60,0x60,0x60,0x60,0x00}, {0x7f,0x7f,0x03,0x06,0x03,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x0e,0x1c,0x38,0x7f,0x7f,0x00}, {0x7f,0x7f,0x63,0x63,0x63,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x1b,0x1b,0x1b,0x1f,0x1f,0x00}, {0x7f,0x7f,0x63,0xf3,0xf3,0x7f,0x7f,0x00}, 
	{0x7f,0x7f,0x1b,0x3b,0x7b,0x7f,0x5f,0x00}, {0x6f,0x6f,0x6b,0x6b,0x6b,0x7b,0x7b,0x00}, 
	{0x03,0x03,0x7f,0x7f,0x03,0x03,0x03,0x00}, {0x7f,0x7f,0x60,0x60,0x60,0x7f,0x7f,0x00}, 
	{0x1f,0x3f,0x70,0x60,0x70,0x3f,0x1f,0x00}, {0x3f,0x7f,0x60,0x30,0x60,0x7f,0x3f,0x00}, 
	{0x77,0x7f,0x1c,0x08,0x1c,0x7f,0x77,0x00}, {0x07,0x0f,0x7c,0x78,0x7c,0x0f,0x07,0x00}, 
	{0x73,0x7b,0x6b,0x6b,0x6b,0x6f,0x67,0x00}, {0x1c,0xff,0xff,0x80,0x00,0x00,0x00,0x00}, 
	{0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, {0x80,0xff,0xff,0x1c,0x00,0x00,0x00,0x00}, 
	{0x00,0x7f,0x40,0x7f,0x00,0x00,0x00,0x00}, {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
};

void PlotPixel(GameState *state, int x, int y, float r, float g, float b)
{
	//discard if pixel is offscreen
	if (x < 0 || x > (state->pixels.Width - 1) || y < 0 || y > (state->pixels.Height - 1))
	{
		return;
	}
	
	//get pixel from buffer
	uint32_t* pixel = (uint32_t*)(((uint8_t*)state->pixels.Memory + state->pixels.Pitch * y)) + x;
	uint32_t color = ((RoundFloatToUInt32(1.0f * 255.0f) << 24) |
					(RoundFloatToUInt32(r * 255.0f) << 16) | 
					(RoundFloatToUInt32(g * 255.0f) << 8) | 
					(RoundFloatToUInt32(b * 255.0f) << 0));
	*pixel = color;
}

typedef enum 
{
	FONT_SMALL,
	FONT_MEDIUM, 
	FONT_LARGE
} FontSize;

void DrawChar(GameState *state, char c, int x, int y, FontSize size, float r, float g, float b) 
{

	int charHeight = 8;
	int charWidth = 3;
	if (size == FONT_MEDIUM) { charWidth = 6; }
	if (size == FONT_LARGE) { charWidth = 8; }
    
	//convert the character to an index
    c = c & 0x7F;
    if (c < ' ') { c = 0; } else { c -= ' '; }

    //draw pixels
    for (int glyphY=0; glyphY < charHeight; glyphY++) 
	{
        for (int glyphX=0; glyphX < charWidth; glyphX++) 
		{
            if ((size == FONT_SMALL && ((1 << glyphY) & fontSmall[c][glyphX])) || 
				(size == FONT_MEDIUM && ((1 << glyphY) & fontMedium[c][glyphX])) ||
				(size == FONT_LARGE && ((1 << glyphY) & fontLarge[c][glyphX])))
			{
                PlotPixel(state, x+glyphX, y+glyphY, r, g, b);
            }
        }
    }
}


void PlotText(GameState *state, int x, int y, float r, float g, float b, FontSize size, char* txt, ...)
{
	//parse text
	char txtbuffer[MAX_DEBUG_MSG];
	//init args to store all values after txt function parameter.
	va_list args;
	va_start (args, txt);
	vsprintf_s(txtbuffer, MAX_DEBUG_MSG - 1, txt, args);
	va_end (args);
	
	//calculate color
    for (size_t c = 0; c < strlen(txtbuffer); c++ )
	{
        DrawChar(state, txtbuffer[c], x, y, size, r, g, b);
		if (size == FONT_SMALL) { x += 3; }
		if (size == FONT_MEDIUM) { x += 6; }
		if (size == FONT_LARGE) { x += 8; }  
    }
}

uint32_t GetColor(uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
	uint32_t col = a << 24 | r << 16 | g << 8 | b << 0;
	return col;
}



void PlotLine(GameState *state, int x0, int y0, int x1, int y1, float r, float g, float b)
{
	//draw a pixel line using Bresenham's algorithm
	bool steep = (((y1 - y0) >=0 ? (y1 - y0) : -(y1 - y0)) > ((x1 - x0) >=0 ? (x1 - x0) : -(x1 - x0)));
	if (steep)
	{
		//swap x0 with y0
		x0 ^= y0; y0 ^= x0; x0 ^= y0;
		//swap x1 with y1
		x1 ^= y1; y1 ^= x1; x1 ^= y1;
	}
	if (x0 > x1)
	{
		//swap x0 with x1
		x0 ^= x1; x1 ^= x0; x0 ^= x1;
		//swap y0 with y1
		y0 ^= y1; y1 ^= y0; y0 ^= y1;
	}
	
	int dErr = ((y1 - y0) >=0 ? (y1 - y0) : -(y1 - y0)); //fast absolute of y1 - y0
	int yStep = y0 > y1? -1 : 1;
	int dX = x1 - x0;
	
	int err = dX >> 1; //fast divide by 2
	int y = y0;
	
	for (int x = x0; x <= x1; x++)
	{
		if (steep)
		{
			PlotPixel(state, y, x, r, g, b);
		}
		else
		{
			PlotPixel(state, x, y, r, g, b);
		}
		err -= dErr;
		if (err < 0)
		{
			y += yStep;
			err += dX;
		}
	}
}

void PlotCircle(GameState *state, int x0, int y0, int radius, float r, float g, float b)
{
  int x = radius;
  int y = 0;
  int decisionOver2 = 1 - x;//decision criterion divided by 2 evaluated at x=r, y=0

  while( y <= x )
  {
    PlotPixel(state,  x + x0,  y + y0, r, g, b); //octant 1
    PlotPixel(state,  y + x0,  x + y0, r, g, b); //octant 2
    PlotPixel(state, -x + x0,  y + y0, r, g, b); //octant 4
    PlotPixel(state, -y + x0,  x + y0, r, g, b); //octant 3
    PlotPixel(state, -x + x0, -y + y0, r, g, b); //octant 5
    PlotPixel(state, -y + x0, -x + y0, r, g, b); //octant 6
    PlotPixel(state,  x + x0, -y + y0, r, g, b); //octant 8
    PlotPixel(state,  y + x0, -x + y0, r, g, b); //octant 7
    y++;
    if (decisionOver2<=0)
    {
      decisionOver2 += 2 * y + 1;   //change in decision criterion for y -> y+1
    }
    else
    {
      x--;
      decisionOver2 += 2 * (y - x) + 1;   //change for y -> y+1, x -> x-1
    }
  }
}
	
void PlotRectangle(GameState *state, float minX, float minY, float maxX, float maxY, float r, float g, float b)
{
	int32_t pixelMinX = RoundFloatToInt32(minX);
	int32_t pixelMinY = RoundFloatToInt32(minY);
	int32_t pixelMaxX = RoundFloatToInt32(maxX);
	int32_t pixelMaxY = RoundFloatToInt32(maxY);
	
	if (pixelMinX < 0) { pixelMinX = 0; }
	if (pixelMinY < 0) { pixelMinY = 0; }
	if (pixelMaxX > state->pixels.Width) { pixelMaxX = state->pixels.Width; }
	if (pixelMaxY > state->pixels.Height) { pixelMaxY = state->pixels.Height; }
	
	uint32_t color = ((RoundFloatToUInt32(r * 255.0f) << 16) | 
					(RoundFloatToUInt32(g * 255.0f) << 8) | 
					(RoundFloatToUInt32(b * 255.0f) << 0));
					
	uint8_t* row = ((uint8_t*)state->pixels.Memory + pixelMinX * 4 + pixelMinY * state->pixels.Pitch);
	
	for (int y = pixelMinY; y < pixelMaxY; y++)
	{
		uint32_t *pixel = (uint32_t*)row;
		
		for (int x = pixelMinX; x < pixelMaxX; x++)
		{
			*pixel++ = color;
		}
		row += state->pixels.Pitch;
	}
}

#pragma pack(push, 1)
typedef struct 
{
	uint16_t FileType;
	uint32_t FileSize;
	uint16_t Reserved1;
	uint16_t Reserved2;
	uint32_t BitmapOffset;
	uint32_t Size;
	int32_t Width;
	int32_t Height;
	uint16_t Planes;
	uint16_t BitsPerPixel;
} BMPHeader;
#pragma pack(pop)

LoadedBMP LoadBMP(char* filename, uint32_t framesX, uint32_t framesY)
{	
	LoadedBMP result = {0};
	FileData fileData = PlatformReadEntireFile(filename);
	if (fileData.ContentSize != 0)
	{
		//get bmp data
		BMPHeader* header = (BMPHeader*)fileData.Content;
		uint32_t* pixels = (uint32_t*)((uint8_t*)fileData.Content + header->BitmapOffset);
		result.Width = header->Width;
		result.Height = header->Height;
		result.Pixels = pixels;
		result.FrameSizePixelsX = header->Width / framesX;
		result.FrameSizePixelsY = header->Height / framesY;
		
		//reverse alpha order
		uint32_t* sourceDest = result.Pixels;
		for (int32_t y = 0; y < header->Width; y++)
		{
			for (int32_t x = 0; x < header->Height; x++)
			{
				*sourceDest = (*sourceDest >> 8) | (*sourceDest << 24);
				sourceDest++;
			}
		}
	}
	return result;
}



void DrawBMP(GameState *state, LoadedBMP* bmp, int32_t posx, int32_t posy, uint32_t frameIDX, uint32_t frameIDY, bool blend, float modAlpha, bool flippedX)
{
	int32_t pixelMinX = posx;
	int32_t pixelMinY = posy;
	int32_t pixelMaxX = posx + bmp->FrameSizePixelsX;
	int32_t pixelMaxY = posy + bmp->FrameSizePixelsY;
	
	if (pixelMinX < 0) { pixelMinX = 0; }
	if (pixelMinY < 0) { pixelMinY = 0; }
	if (pixelMaxX > state->pixels.Width) { pixelMaxX = state->pixels.Width; }
	if (pixelMaxY > state->pixels.Height) { pixelMaxY = state->pixels.Height; }
	
	uint8_t* destRow = ((uint8_t*)state->pixels.Memory + pixelMinX * 4 + pixelMinY * state->pixels.Pitch);
	uint32_t* sourceRow = bmp->Pixels + bmp->Width*((bmp->FrameSizePixelsY*((bmp->Height / bmp->FrameSizePixelsY) - frameIDY)) - 1) + (frameIDX * bmp->FrameSizePixelsX);
									
	for (int32_t y = pixelMinY; y < pixelMaxY; y++)
	{
		uint32_t* dest = (uint32_t*)destRow;
		uint32_t* source = sourceRow;

		for (int32_t x = pixelMinX; x < pixelMaxX; x++)
		{
		
		
			float A =  (float)((*source >> 24) & 0xFF) / 255.0f;
            float SR = (float)((*source >> 16) & 0xFF);
            float SG = (float)((*source >> 8) & 0xFF);
            float SB = (float)((*source >> 0) & 0xFF);
			
            float DR = (float)((*dest >> 16) & 0xFF);
            float DG = (float)((*dest >> 8) & 0xFF);
            float DB = (float)((*dest >> 0) & 0xFF);

            float R = (1.0f-A)*DR + A*SR;
            float G = (1.0f-A)*DG + A*SG;
            float B = (1.0f-A)*DB + A*SB;

            *dest = (((uint32_t)(R + 0.5f) << 16) |
                     ((uint32_t)(G + 0.5f) << 8) |
                     ((uint32_t)(B + 0.5f) << 0));
            
            ++dest;
            ++source;
		}
		sourceRow -= bmp->Width;
		destRow += state->pixels.Pitch;	
	}
}

#endif